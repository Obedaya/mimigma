include:
  - template: Security/Container-Scanning.gitlab-ci.yml
  - template: Jobs/SAST.gitlab-ci.yml

stages:
  - build
  - scan 
  - test
  - cleanup

# Build and push the frontend image
build_frontend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f ./frontend/Dockerfile ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME

# Build and push the backend image
build_backend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f ./backend/Dockerfile ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME

# Trivy Scan mit defauls
container_scanning:
  stage: scan
  variables:
    SECURE_LOG_LEVEL: 'debug'
    CS_IMAGE: 'registry.mygit.th-deg.de/mimigma/mimigma/backend'
    CS_DOCKERFILE_PATH: './backend/Dockerfile'
    GIT_STRATEGY: 'fetch'
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script: 
    - trivy image --exit-code 1 --severity HIGH,CRITICAL $CS_IMAGE


e2e-test:
  stage: test
  image: docker:26.0.1-dind  # Use the dind image for running Docker commands
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker-compose rm -f
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
    - docker-compose --profile e2etest up --build --abort-on-container-exit

unit-test:
  stage: test
  image: docker:26.0.1-dind  # Use the dind image for running Docker commands
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
    - docker-compose --profile unittest up --build --abort-on-container-exit

# Trivy Scans
# frontend_scan:
#   stage: scan
#   before_script:
#     - echo "does this work?" 
#     - echo $CI_REGISTRY_USER
#     - echo $CI_REGISTRY_PASSWORD
#     - echo $CI_REGISTRY_IMAGE
#     - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
#     - |
#       if [ $? -ne 0 ]; then
#         echo "Docker login failed"
#         exit 1
#       fi
#   variables:
#     SECURE_LOG_LEVEL: 'debug'
#     CS_IMAGE: 'registry.mygit.th-deg.de/mimigma/mimigma/frontend:$CI_COMMIT_REF_NAME'
#     CS_DOCKERFILE_PATH: './frontend/Dockerfile'
#     GIT_STRATEGY: 'fetch'
#   script:
#     - echo $CS_IMAGE
#     - docker pull $CS_IMAGE
#     - |
#       if [ $? -ne 0 ]; then
#         echo "Docker pull failed"
#         exit 1
#       fi
#     - docker images
#     - trivy image --exit-code 1 --severity HIGH,CRITICAL $CS_IMAGE
# 
# # backend_scan:
# #   stage: scan
# #   before_script:
# #   - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
# #   variables:
# #     SECURE_LOG_LEVEL: 'debug'
# #     CS_IMAGE: '$CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME'
# #     CS_DOCKERFILE_PATH: './backend/Dockerfile'
# #     GIT_STRATEGY: 'fetch'
# #   script:
# #     - trivy image --exit-code 1 --severity HIGH,CRITICAL $CS_IMAGE
# # 
# cleanup:
#   stage: cleanup
#   image: docker:26.0.1
#   script:
#     - docker rmi $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME;
#     - docker rmi $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME;
#   when: always
# 