stages:
  - build 
  - e2e_test
  - cleanup

# Build and push the frontend image
build_frontend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f ./frontend/Dockerfile ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME

# Build and push the backend image
build_backend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f ./backend/Dockerfile ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME

cypress-test:
  stage: e2e_test
  image: $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
  script:
    - ls -la /app # List files in the workdir
    - printenv | grep PATH # Filter PATH variable from environment variables
    - npm list -g --depth=0  # List globally installed npm packages
    - node -v  # Print the Node.js version
    - npm -v  # Print the npm version
    - bun --version  # Print the Bun version
    - bunx cypress --version  # Check for Cypress

cleanup:
  stage: cleanup
  image: docker:26.0.1
  script:
    - docker rmi $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME;
    - docker rmi $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME;
  when: always

