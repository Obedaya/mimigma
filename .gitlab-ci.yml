stages:
  - test
  - build 
  - e2e_test
  - release
  - cleanup

unit-test:
  stage: test
  image: python:3.10.4-alpine
  script:
    - pip install pipenv
    - pipenv install --dev
    - pipenv run coverage run -m pytest --junitxml=report.xml tests/unit  
    - pipenv run coverage report
    - pipenv run coverage xml
  coverage: '/(?i)total.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/'
  artifacts:
    reports:
      junit: report.xml
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

build_frontend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f ./frontend/Dockerfile ./frontend
    - if [[ "$CI_COMMIT_TAG" =~ ^release- ]]; then
        docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_TAG;
      fi

build_backend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f ./backend/Dockerfile ./backend
    - if [[ "$CI_COMMIT_TAG" =~ ^release- ]]; then
        docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_TAG;
      fi

cypress-test:   
  stage: e2e_test
  image: docker:26.0.1
  services:
    - docker:dind
  script:
    - docker-compose up -d --build frontend db   
    - docker-compose --profile testing up --build cypress  
    - docker-compose down  

nightly_release:  
  stage: release
  image: docker:26.0.1
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - export VERSION=$(date +%Y.%m.%d)  # Generate version based on date 
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$VERSION -f ./frontend/Dockerfile ./frontend
    - docker build -t $CI_REGISTRY_IMAGE/backend:$VERSION -f ./backend/Dockerfile ./backend
    - docker push $CI_REGISTRY_IMAGE/frontend:$VERSION
    - docker push $CI_REGISTRY_IMAGE/backend:$VERSION
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"  # Run only for scheduled pipelines 

cleanup:
  stage: cleanup
  image: docker:26.0.1
  services:
    - docker:dind
  script:
    - if docker images $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME | grep -q $CI_COMMIT_REF_NAME; then
        docker rmi $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME;
      fi
    - if docker images $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME | grep -q $CI_COMMIT_REF_NAME; then
        docker rmi $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME;
      fi
  when: always

