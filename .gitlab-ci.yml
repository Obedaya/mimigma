stages:
  - build 
  - e2e_test
  - cleanup

# Build and push the frontend image
build_frontend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f ./frontend/Dockerfile ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME

# Build and push the backend image
build_backend:
  stage: build
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f ./backend/Dockerfile ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME

cypress-test:
  stage: e2e_test
  image: docker:26.0.1-dind  # Use the dind image for running Docker commands
  services:
    - docker:26.0.1-dind
  script:
    - docker-compose up -d --build # Start services in detached mode
    - docker-compose exec frontend npx cypress open # Run Cypress in the frontend container
    - docker-compose down -v # Clean up after the tests

cleanup:
  stage: cleanup
  image: docker:26.0.1
  script:
    - docker rmi $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME;
    - docker rmi $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME;
  when: always

