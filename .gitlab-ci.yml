include:
  - template: Jobs/SAST.gitlab-ci.yml

default:
  image: docker:26.0.1
  services:
    - docker:26.0.1-dind

.build_test_scan_defaults:
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    # Debugging:
    # - echo "=== Before docker-compose rm -f ==="
    # - docker ps -a                                     
    # - docker inspect mimigma-db-1 || true                # Inspect the conflicting container (if it exists)
    # - docker-compose ps                                  # List containers managed by Compose

stages:
  - build
  - scan
  - e2e
  - test
  - cleanup

# Build and push the frontend image
build_frontend:
  stage: build
  extends: .build_test_scan_defaults
  script:
    - docker build -t $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME -f ./frontend/Dockerfile ./frontend
    - docker push $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME

# Build and push the backend image
build_backend:
  stage: build
  extends: .build_test_scan_defaults
  script:
    - docker build -t $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME -f ./backend/Dockerfile ./backend
    - docker push $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME

# Trivy Scan - modify CS_IMAGE depending which image you want to scan
backend_scan:
  stage: scan
  extends: .build_test_scan_defaults
  variables:
    CS_IMAGE: 'registry.mygit.th-deg.de/mimigma/mimigma/backend:main'
  script:
    - apk add curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.52.2
    - trivy image $CS_IMAGE | tee scanning-report.txt
  artifacts:
    reports:
      container_scanning: scanning-report.txt

frontend_scan:
  stage: scan
  extends: .build_test_scan_defaults
  variables:
    CS_IMAGE: 'registry.mygit.th-deg.de/mimigma/mimigma/frontend:main'
  script:
    - apk add curl
    - curl -sfL https://raw.githubusercontent.com/aquasecurity/trivy/main/contrib/install.sh | sh -s -- -b /usr/local/bin v0.52.2
    - trivy image $CS_IMAGE | tee scanning-report.txt
  artifacts:
    reports:
      container_scanning: scanning-report.txt

e2e_test:
  stage: e2e
  extends: .build_test_scan_defaults
  script:
    - docker-compose rm -f
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
    - docker-compose --profile e2etest up --build --abort-on-container-exit

unit_test:
  stage: test
  extends: .build_test_scan_defaults
  script:
    - docker network ls
    - docker ps -a
    - docker pull $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
    - docker-compose --profile unittest up --build --abort-on-container-exit

cleanup:
  stage: cleanup
  script:
    - docker rmi $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_REF_NAME
    - docker rmi $CI_REGISTRY_IMAGE/backend:$CI_COMMIT_REF_NAME
  when: always
  needs:
   - e2e_test
   - unit_test